require('dotenv').config();
const { App } = require('@slack/bolt');
const dayjs = require('dayjs');

// Bolt„Ç¢„Éó„É™ÂàùÊúüÂåñ
const app = new App({
  token: process.env.SLACK_BOT_TOKEN,
  signingSecret: process.env.SLACK_SIGNING_SECRET
});

// ÊõúÊó•„Çπ„Çø„É≥„ÉóÂêçÔºàÊó•Êõú=0 ‚Üí ÊúàÊõú=0 „Å´Â§âÊèõÔºâ
const weekdayToEmoji = [
  'getsu', // Êúà
  'ka',    // ÁÅ´
  'sui',   // Ê∞¥
  'moku',  // Êú®
  'kin',   // Èáë
  'do',    // Âúü
  'niti'   // Êó•
];

// ÊåáÂÆö„ÅÆÊúàÊó•„Åã„Çâ„Äå‰ªäÊó•„Å´ÊúÄ„ÇÇËøë„ÅÑÂπ¥„Äç„ÇíÊé®ÂÆö
function resolveDate(month, day) {
  const today = dayjs();
  const candidates = [
    dayjs(`${today.year() - 1}-${month}-${day}`, 'YYYY-M-D'),
    dayjs(`${today.year()}-${month}-${day}`, 'YYYY-M-D'),
    dayjs(`${today.year() + 1}-${month}-${day}`, 'YYYY-M-D'),
  ];
  return candidates
    .filter(date => date.isValid())
    .sort((a, b) => Math.abs(a.diff(today)) - Math.abs(b.diff(today)))[0];
}

// === „É°„ÉÉ„Çª„Éº„Ç∏ÊäïÁ®øÊôÇ„ÅÆÂá¶ÁêÜ ===
app.message(async ({ message, client }) => {
  try {
    const channelInfo = await client.conversations.info({ channel: message.channel });
    const channelName = channelInfo.channel.name;

    if (!message.text || message.subtype === 'bot_message') return;

    // === „Éï„É™„Éº„Éà„Éº„ÇØ: OKÊ§úÁü•„Åß üëÄ ===
    if (channelName === '„Éï„É™„Éº„Éà„Éº„ÇØ' && message.text.includes('OK')) {
      await client.reactions.add({
        channel: message.channel,
        name: 'eyes',
        timestamp: message.ts
      });
      return;
    }

    // === Âã§ÊÄ†ÈÄ£Áµ°„ÉÅ„É£„É≥„Éç„É´„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÊ§úË®º ===
    if (channelName === 'Âã§ÊÄ†ÈÄ£Áµ°') {
      const lines = message.text.trim().split(/\r?\n/);
      let allValid = true;

      const formatRegex = /^(\d{1,2})\/(\d{1,2})\s+\S+\s+\S+(?:\s+\S+)*(\s+Ë®àÁîª‰ºë)?$/;

      for (const line of lines) {
        const match = line.trim().match(formatRegex);
        if (!match) {
          allValid = false;
          break;
        }

        const [_, month, day] = match;
        const date = resolveDate(month, day);
        if (!date.isValid()) {
          allValid = false;
          break;
        }

        // ÊõúÊó•„Çπ„Çø„É≥„ÉóÔºàÊó•Êõú=0 ‚Üí ÊúàÊõú=0 „Å´Â§âÊèõÔºâ
        const emojiIndex = (date.day() + 6) % 7;
        const emoji = weekdayToEmoji[emojiIndex];

        // ÊõúÊó•„Çπ„Çø„É≥„ÉóËøΩÂä†
        await addReactionSafe(client, message.channel, emoji, message.ts);

        // Êú™Êù•„ÉªÈÅéÂéª„Çπ„Çø„É≥„Éó
        const today = dayjs();
        const directionEmoji = date.isBefore(today, 'day') ? 'rewind' : 'fast_forward';
        await addReactionSafe(client, message.channel, directionEmoji, message.ts);
      }

      // ‚úÖ or ‚ùå „É™„Ç¢„ÇØ„Ç∑„Éß„É≥
      const checkEmoji = allValid ? 'white_check_mark' : 'x';
      await addReactionSafe(client, message.channel, checkEmoji, message.ts);

      // ‚ùå „ÅÆÂ†¥Âêà„ÅØÊ≥®ÊÑè„Ç≥„É°„É≥„Éà
      if (!allValid) {
        await client.chat.postMessage({
          channel: message.channel,
          thread_ts: message.ts,
          text: '`Êó•‰ªò` `ÂêçÂ≠ó` `‰ºëÊöáÁ®ÆÂà•` `ÁêÜÁî±„Å™„Å©` `Ë®àÁîª‰ºë„Åã„Å©„ÅÜ„Åã` „ÅÆÂΩ¢Âºè„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\n‰æã: 8/5 Ëó§Èñì ‰ºëÊöá ‰ΩìË™ø‰∏çËâØ'
        });
      }
    }
  } catch (error) {
    console.error('„É°„ÉÉ„Çª„Éº„Ç∏Âá¶ÁêÜ„Ç®„É©„Éº:', error);
  }
});

// === Á∑®ÈõÜ„Åï„Çå„Åü„ÇâË≠¶Âëä„Ç≥„É°„É≥„Éà„ÇíÈÄÅ‰ø°Ôºà„Çπ„É¨„ÉÉ„ÉâËøî‰ø°„ÉªBotÊäïÁ®ø„ÅØÁÑ°Ë¶ñÔºâ ===
app.event('message', async ({ event, client }) => {
  if (event.subtype === 'message_changed') {
    const msg = event.message;

    // ÁÑ°Èôê„É´„Éº„ÉóÂõûÈÅø + Á∑®ÈõÜÊ∏à„Åø„Çπ„É¨„ÉÉ„ÉâËøî‰ø°„ÇíÁÑ°Ë¶ñ
    if (
      msg.bot_id ||                               // BotËá™Ë∫´„ÅÆÊäïÁ®ø
      event.previous_message?.bot_id ||           // ‰ª•Ââç„ÅÆÊäïÁ®ø„ÅåBot„ÅÆ„ÇÇ„ÅÆ
      !msg.text || msg.text.trim() === '' ||      // Á©∫„É°„ÉÉ„Çª„Éº„Ç∏
      (msg.thread_ts && msg.thread_ts !== msg.ts) // „Çπ„É¨„ÉÉ„ÉâËøî‰ø°„ÅØÁÑ°Ë¶ñÔºàË¶™„É°„ÉÉ„Çª„Éº„Ç∏„Å†„ÅëË®±ÂèØÔºâ
    ) {
      return;
    }

    try {
      await client.chat.postMessage({
        channel: event.channel,
        thread_ts: msg.ts,
        text: '„Åì„ÅÆÁî≥Ë´ã„ÅØ**ÁÑ°Âäπ**„Åß„Åô„ÄÇÁî≥Ë´ã„Å®Êú¨„É°„ÉÉ„Çª„Éº„Ç∏„Çí**ÂâäÈô§„Åó„Å¶ÂÜçÂ∫¶Áî≥Ë´ã**„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
      });
    } catch (error) {
      console.error('Á∑®ÈõÜÊ§úÁü•„Ç®„É©„Éº:', error);
    }
  }
});

// === Âêå„Åò„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Çí2Â∫¶Êäº„Åï„Å™„ÅÑ„Çà„ÅÜÂÆâÂÖ®„Å´„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Çí‰ªò„Åë„Çã ===
async function addReactionSafe(client, channel, name, timestamp) {
  try {
    await client.reactions.add({
      channel,
      name,
      timestamp
    });
  } catch (error) {
    if (error.data?.error !== 'already_reacted') {
      console.error(`„É™„Ç¢„ÇØ„Ç∑„Éß„É≥Â§±Êïó(${name}):`, error);
    }
  }
}

// „Çµ„Éº„Éê„ÉºËµ∑Âãï
(async () => {
  await app.start(process.env.PORT || 3000);
  console.log('‚ö°Ô∏è Bolt app is running!');
})();
